generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String?    @unique
  emailVerified DateTime?
  image         String?
  userData      UserData?
  accounts      Account[]
  sessions      Session[]
  workouts      Workout[]
  meals         Meal[]
}

model UserData {
  id                  String        @id @default(cuid())
  user                User          @relation(fields: [userId], references: [id])
  userId              String        @unique
  profileImage        String
  weight              Float
  height              Float
  age                 Int
  gender              String
  activityLevel       String
  dietType            String
  preferences         String?
  goal                String
  theme               String        @default("aurora")
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt
  dailyWeights        DailyWeight[]
  onboardingCompleted Boolean       @default(false)
}

model DailyWeight {
  id         String   @id @default(cuid())
  userData   UserData @relation(fields: [userDataId], references: [id])
  userDataId String
  date       DateTime
  weight     Float
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  user               User    @relation(fields: [userId], references: [id])
  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  @@unique([identifier, token])
}

model Workout {
  id         String   @id @default(cuid())
  userId     String
  fecha      DateTime
  duracion   Int
  actividad  String
  intensidad String
  calorias   Float
  user       User     @relation(fields: [userId], references: [id])
}

model Food {
  id          String   @id @default(cuid())
  nombre      String   @unique
  calorias    Float    // por 100g
  proteinas   Float    // por 100g
  grasas      Float    // por 100g
  carbohidratos Float  // por 100g
  gramosPorUnidad Float? // gramos por unidad (ej: 60g por huevo)
  unidad      String   @default("g") // "g", "unidad", "ml", etc.
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  mealItems   MealItem[]
}

model Meal {
  id            String     @id @default(cuid())
  userId        String
  fecha         DateTime
  hora          String
  tipoComida    String     // desayuno, almuerzo, cena, merienda, snack
  caloriasTotales Float
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  user          User       @relation(fields: [userId], references: [id])
  mealItems     MealItem[]
}

model MealItem {
  id        String   @id @default(cuid())
  mealId    String
  foodId    String
  gramos    Float
  calorias  Float
  meal      Meal     @relation(fields: [mealId], references: [id], onDelete: Cascade)
  food      Food     @relation(fields: [foodId], references: [id])
  createdAt DateTime @default(now())
} 